var xing = xing || {};xing.bikinibottom = xing.bikinibottom || {};xing.bikinibottom.player = {	_videoOptions: {},	_uiElements: {},		setVideoOptions: function(videoOptions) {		this._videoOptions = videoOptions;	},		setUiElements: function(uiElements) {		this._uiElements = uiElements;	},		initialize: function() {		this._initVisibility();		this._initPlayer();		this._loadVideo();		this._observe();	},		_initVisibility: function() {		this._uiElements.but_pause._visible = false;		this._uiElements.but_preview._visible = false;		this._uiElements.but_rerecord._visible = this._videoOptions.isPreview;	},		_initPlayer: function() {		this._loading();	},		_loadVideo: function() {		var that = this;				this._netConnection = new NetConnection();		this._netConnection.connect(this._videoOptions.url);				this._netStream = new NetStream(this._netConnection);		this._netStream.setBufferTime(this._videoOptions.bufferTime);		this._netStream.onStatus = function(info) { that._onStatus(info); };		this._netStream.onPlayStatus = function(info) { that._onPlayStatus(info); };		this._netStream.onMetaData = function(info) { that._startTimer(info); };				this._uiElements.player.attachVideo(this._netStream);				this._netStream.play(this._videoOptions.id);	},		_observe: function() {		var that = this;				this._uiElements.but_play.onRelease = function() { that._play(); };		this._uiElements.but_pause.onRelease = function() { that._pause(); };		this._uiElements.but_rewind.onRelease = function() { that._rewind(); };				if (this._videoOptions.isPreview) {			this._uiElements.but_rerecord.onRelease = function() {				that._cancel();				gotoAndPlay(1);			}		}	},		_loading: function() {		this._uiElements.txt_status.text = "loading...";		this._uiElements.player._alpha = 30;		this._disable();	},		_showPlay: function() {		this._uiElements.but_play._visible = true;		this._uiElements.but_pause._visible = false;	},		_showPause: function() {		this._uiElements.but_play._visible = false;		this._uiElements.but_pause._visible = true;	},		_enable: function() {		this._uiElements.but_play.enabled = true;		this._uiElements.but_pause.enabled = true;		this._uiElements.but_rewind.enabled = true;	},		_disable: function() {		this._uiElements.but_play.enabled = false;		this._uiElements.but_pause.enabled = false;		this._uiElements.but_rewind.enabled = false;	},		_play: function() {		this._uiElements.player._alpha = 100;				if (this._videoFinished) {			this._videoFinished = false;			this._netStream.seek(0);		} else {			this._netStream.pause();		}	},		_pause: function() {		this._netStream.pause();	},		_rewind: function() {		this._uiElements.player._alpha = 100;			this._netStream.seek(0);		this._netStream.pause(false);	},		_cancel: function() {		this._netStream.pause();		this._netStream.close();	},		_continue: function() {		this._enable();		this._uiElements.txt_status.text = "";		this._uiElements.player._alpha = 100;	},		_end: function() {		this._uiElements.txt_status.text = "";		this._uiElements.player._alpha = 30;		this._videoFlushed = false;		this._videoFinished = true;		clearInterval(this._interval);		this._showPlay();	},		_onStatus: function(info) {		var code = info.code;		trace(code);				if (code == "NetStream.Pause.Notify") {			this._showPlay();		}		if (code == "NetStream.Buffer.Flush") {			this._videoFlushed = true;		}		if (code == "NetStream.Buffer.Empty" && !this._videoFlushed && !this._videoFinished) {			trace("-- loading --");			this._loading();		}		if (code == "NetStream.Play.Start" || code == "NetStream.Buffer.Full") {			this._continue();			this._showPause();		}	},		_onPlayStatus: function(info) {		trace("-- complete --");				if (info.code == "NetStream.Play.Complete") {			this._end();		}	},		_startTimer: function(info) {		var that = this;		var maxDuration = info.duration;				if (maxDuration > 0) {			var maxDurationStr = xing.bikinibottom.utils.convertToTimerFormat(maxDuration);			var updateTimer = function() {				var duration = that._netStream.time;				var durationStr = xing.bikinibottom.utils.convertToTimerFormat(duration);				that._uiElements.txt_timer.text = durationStr + " / " + maxDurationStr;			};						this._interval = setInterval(updateTimer, 100);		}	}};